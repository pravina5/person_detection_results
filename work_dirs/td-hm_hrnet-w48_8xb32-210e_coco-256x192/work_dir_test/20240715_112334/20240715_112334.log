2024/07/15 11:23:36 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.19 (default, Mar 20 2024, 19:58:24) [GCC 11.2.0]
    CUDA available: False
    MUSA available: False
    numpy_random_seed: 266909153
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
    PyTorch: 2.3.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.1, USE_CUDA=0, USE_CUDNN=OFF, USE_CUSPARSELT=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.1
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: False
    dist_cfg: {'backend': 'nccl'}
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    seed: 266909153
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/07/15 11:23:37 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=512)
backend_args = dict(backend='local')
codec = dict(
    heatmap_size=(
        48,
        64,
    ),
    input_size=(
        192,
        256,
    ),
    sigma=2,
    type='MSRAHeatmap')
custom_hooks = [
    dict(type='SyncBuffersHook'),
]
data_mode = 'topdown'
data_root = 'data/coco/'
dataset_type = 'CocoDataset'
default_hooks = dict(
    badcase=dict(
        badcase_thr=5,
        enable=False,
        metric_type='loss',
        out_dir='badcase',
        type='BadCaseAnalysisHook'),
    checkpoint=dict(
        interval=10,
        rule='greater',
        save_best='coco/AP',
        type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='PoseVisualizationHook'))
default_scope = 'mmpose'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'td-hm_hrnet-w48_8xb32-210e_coco-256x192-0e67c616_20220913.pth'
log_level = 'INFO'
log_processor = dict(
    by_epoch=True, num_digits=6, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        extra=dict(
            stage1=dict(
                block='BOTTLENECK',
                num_blocks=(4, ),
                num_branches=1,
                num_channels=(64, ),
                num_modules=1),
            stage2=dict(
                block='BASIC',
                num_blocks=(
                    4,
                    4,
                ),
                num_branches=2,
                num_channels=(
                    48,
                    96,
                ),
                num_modules=1),
            stage3=dict(
                block='BASIC',
                num_blocks=(
                    4,
                    4,
                    4,
                ),
                num_branches=3,
                num_channels=(
                    48,
                    96,
                    192,
                ),
                num_modules=4),
            stage4=dict(
                block='BASIC',
                num_blocks=(
                    4,
                    4,
                    4,
                    4,
                ),
                num_branches=4,
                num_channels=(
                    48,
                    96,
                    192,
                    384,
                ),
                num_modules=3)),
        in_channels=3,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmpose/pretrain_models/hrnet_w48-8ef0771d.pth',
            type='Pretrained'),
        type='HRNet'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='PoseDataPreprocessor'),
    head=dict(
        decoder=dict(
            heatmap_size=(
                48,
                64,
            ),
            input_size=(
                192,
                256,
            ),
            sigma=2,
            type='MSRAHeatmap'),
        deconv_out_channels=None,
        in_channels=48,
        loss=dict(type='KeypointMSELoss', use_target_weight=True),
        out_channels=17,
        type='HeatmapHead'),
    test_cfg=dict(flip_mode='heatmap', flip_test=True, shift_heatmap=True),
    type='TopdownPoseEstimator')
optim_wrapper = dict(optimizer=dict(lr=0.0005, type='Adam'))
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=210,
        gamma=0.1,
        milestones=[
            170,
            200,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=32,
    dataset=dict(
        ann_file='annotations/person_keypoints_val2017.json',
        bbox_file=
        'data/coco/person_detection_results/COCO_val2017_detections_AP_H_56_person.json',
        data_mode='topdown',
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(type='LoadImage'),
            dict(type='GetBBoxCenterScale'),
            dict(input_size=(
                192,
                256,
            ), type='TopdownAffine'),
            dict(type='PackPoseInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(round_up=False, shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco/annotations/person_keypoints_val2017.json',
    type='CocoMetric')
train_cfg = dict(by_epoch=True, max_epochs=210, val_interval=10)
train_dataloader = dict(
    batch_size=32,
    dataset=dict(
        ann_file='annotations/person_keypoints_train2017.json',
        data_mode='topdown',
        data_prefix=dict(img='train2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(type='LoadImage'),
            dict(type='GetBBoxCenterScale'),
            dict(direction='horizontal', type='RandomFlip'),
            dict(type='RandomHalfBody'),
            dict(type='RandomBBoxTransform'),
            dict(input_size=(
                192,
                256,
            ), type='TopdownAffine'),
            dict(
                encoder=dict(
                    heatmap_size=(
                        48,
                        64,
                    ),
                    input_size=(
                        192,
                        256,
                    ),
                    sigma=2,
                    type='MSRAHeatmap'),
                type='GenerateTarget'),
            dict(type='PackPoseInputs'),
        ],
        type='CocoDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImage'),
    dict(type='GetBBoxCenterScale'),
    dict(direction='horizontal', type='RandomFlip'),
    dict(type='RandomHalfBody'),
    dict(type='RandomBBoxTransform'),
    dict(input_size=(
        192,
        256,
    ), type='TopdownAffine'),
    dict(
        encoder=dict(
            heatmap_size=(
                48,
                64,
            ),
            input_size=(
                192,
                256,
            ),
            sigma=2,
            type='MSRAHeatmap'),
        type='GenerateTarget'),
    dict(type='PackPoseInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=32,
    dataset=dict(
        ann_file='annotations/person_keypoints_val2017.json',
        bbox_file=
        'data/coco/person_detection_results/COCO_val2017_detections_AP_H_56_person.json',
        data_mode='topdown',
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(type='LoadImage'),
            dict(type='GetBBoxCenterScale'),
            dict(input_size=(
                192,
                256,
            ), type='TopdownAffine'),
            dict(type='PackPoseInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(round_up=False, shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco/annotations/person_keypoints_val2017.json',
    type='CocoMetric')
val_pipeline = [
    dict(type='LoadImage'),
    dict(type='GetBBoxCenterScale'),
    dict(input_size=(
        192,
        256,
    ), type='TopdownAffine'),
    dict(type='PackPoseInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='PoseLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/td-hm_hrnet-w48_8xb32-210e_coco-256x192/work_dir_test'

2024/07/15 11:23:39 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/07/15 11:23:39 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) PoseVisualizationHook              
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) BadCaseAnalysisHook                
(NORMAL      ) PoseVisualizationHook              
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) BadCaseAnalysisHook                
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/07/15 11:23:47 - mmengine - INFO - Load checkpoint from td-hm_hrnet-w48_8xb32-210e_coco-256x192-0e67c616_20220913.pth
2024/07/15 11:27:48 - mmengine - INFO - Epoch(test) [  50/3254]    eta: 4:17:31  time: 4.822564  data_time: 0.030824  
2024/07/15 11:31:48 - mmengine - INFO - Epoch(test) [ 100/3254]    eta: 4:13:08  time: 4.808655  data_time: 0.021390  
2024/07/15 11:35:51 - mmengine - INFO - Epoch(test) [ 150/3254]    eta: 4:09:53  time: 4.859601  data_time: 0.022265  
2024/07/15 11:39:56 - mmengine - INFO - Epoch(test) [ 200/3254]    eta: 4:06:38  time: 4.891927  data_time: 0.022583  
2024/07/15 11:44:00 - mmengine - INFO - Epoch(test) [ 250/3254]    eta: 4:03:03  time: 4.891331  data_time: 0.022791  
2024/07/15 11:48:05 - mmengine - INFO - Epoch(test) [ 300/3254]    eta: 3:59:20  time: 4.894029  data_time: 0.024670  
2024/07/15 11:52:09 - mmengine - INFO - Epoch(test) [ 350/3254]    eta: 3:55:24  time: 4.879674  data_time: 0.023465  
2024/07/15 11:56:15 - mmengine - INFO - Epoch(test) [ 400/3254]    eta: 3:51:40  time: 4.916389  data_time: 0.026037  
2024/07/15 12:00:21 - mmengine - INFO - Epoch(test) [ 450/3254]    eta: 3:47:54  time: 4.928230  data_time: 0.026102  
2024/07/15 12:04:27 - mmengine - INFO - Epoch(test) [ 500/3254]    eta: 3:44:00  time: 4.909755  data_time: 0.026749  
2024/07/15 12:08:32 - mmengine - INFO - Epoch(test) [ 550/3254]    eta: 3:39:59  time: 4.893150  data_time: 0.027436  
2024/07/15 12:12:37 - mmengine - INFO - Epoch(test) [ 600/3254]    eta: 3:36:02  time: 4.915628  data_time: 0.024625  
2024/07/15 12:16:41 - mmengine - INFO - Epoch(test) [ 650/3254]    eta: 3:31:56  time: 4.874433  data_time: 0.025272  
2024/07/15 12:20:45 - mmengine - INFO - Epoch(test) [ 700/3254]    eta: 3:27:51  time: 4.876520  data_time: 0.024227  
2024/07/15 12:24:49 - mmengine - INFO - Epoch(test) [ 750/3254]    eta: 3:23:46  time: 4.877543  data_time: 0.030502  
2024/07/15 12:28:53 - mmengine - INFO - Epoch(test) [ 800/3254]    eta: 3:19:42  time: 4.884954  data_time: 0.024492  
2024/07/15 12:32:56 - mmengine - INFO - Epoch(test) [ 850/3254]    eta: 3:15:35  time: 4.865225  data_time: 0.024613  
2024/07/15 12:37:01 - mmengine - INFO - Epoch(test) [ 900/3254]    eta: 3:11:34  time: 4.901903  data_time: 0.025310  
2024/07/15 12:41:05 - mmengine - INFO - Epoch(test) [ 950/3254]    eta: 3:07:28  time: 4.869949  data_time: 0.024584  
2024/07/15 12:45:08 - mmengine - INFO - Epoch(test) [1000/3254]    eta: 3:03:22  time: 4.861214  data_time: 0.025353  
2024/07/15 12:49:12 - mmengine - INFO - Epoch(test) [1050/3254]    eta: 2:59:17  time: 4.873322  data_time: 0.022814  
2024/07/15 12:53:13 - mmengine - INFO - Epoch(test) [1100/3254]    eta: 2:55:07  time: 4.821182  data_time: 0.021578  
2024/07/15 12:57:19 - mmengine - INFO - Epoch(test) [1150/3254]    eta: 2:51:07  time: 4.927256  data_time: 0.023624  
2024/07/15 13:01:22 - mmengine - INFO - Epoch(test) [1200/3254]    eta: 2:47:01  time: 4.855119  data_time: 0.021350  
2024/07/15 13:05:26 - mmengine - INFO - Epoch(test) [1250/3254]    eta: 2:42:57  time: 4.875966  data_time: 0.021944  
2024/07/15 13:09:31 - mmengine - INFO - Epoch(test) [1300/3254]    eta: 2:38:55  time: 4.901474  data_time: 0.022716  
2024/07/15 13:13:36 - mmengine - INFO - Epoch(test) [1350/3254]    eta: 2:34:52  time: 4.898009  data_time: 0.023915  
2024/07/15 13:17:42 - mmengine - INFO - Epoch(test) [1400/3254]    eta: 2:30:51  time: 4.932269  data_time: 0.022344  
2024/07/15 13:21:46 - mmengine - INFO - Epoch(test) [1450/3254]    eta: 2:26:47  time: 4.875320  data_time: 0.026228  
2024/07/15 13:25:47 - mmengine - INFO - Epoch(test) [1500/3254]    eta: 2:22:40  time: 4.829517  data_time: 0.022820  
2024/07/15 13:29:53 - mmengine - INFO - Epoch(test) [1550/3254]    eta: 2:18:38  time: 4.920035  data_time: 0.022450  
2024/07/15 13:34:01 - mmengine - INFO - Epoch(test) [1600/3254]    eta: 2:14:37  time: 4.946659  data_time: 0.021515  
2024/07/15 13:38:06 - mmengine - INFO - Epoch(test) [1650/3254]    eta: 2:10:34  time: 4.899293  data_time: 0.021906  
2024/07/15 13:42:10 - mmengine - INFO - Epoch(test) [1700/3254]    eta: 2:06:30  time: 4.885650  data_time: 0.023488  
2024/07/15 13:46:16 - mmengine - INFO - Epoch(test) [1750/3254]    eta: 2:02:27  time: 4.925876  data_time: 0.021172  
2024/07/15 13:50:25 - mmengine - INFO - Epoch(test) [1800/3254]    eta: 1:58:26  time: 4.969466  data_time: 0.022869  
2024/07/15 13:54:34 - mmengine - INFO - Epoch(test) [1850/3254]    eta: 1:54:26  time: 4.989264  data_time: 0.022042  
2024/07/15 13:58:42 - mmengine - INFO - Epoch(test) [1900/3254]    eta: 1:50:23  time: 4.948023  data_time: 0.023074  
2024/07/15 14:02:52 - mmengine - INFO - Epoch(test) [1950/3254]    eta: 1:46:22  time: 5.001323  data_time: 0.022973  
2024/07/15 14:07:02 - mmengine - INFO - Epoch(test) [2000/3254]    eta: 1:42:21  time: 4.999029  data_time: 0.023945  
2024/07/15 14:11:11 - mmengine - INFO - Epoch(test) [2050/3254]    eta: 1:38:19  time: 4.993534  data_time: 0.024253  
2024/07/15 14:15:21 - mmengine - INFO - Epoch(test) [2100/3254]    eta: 1:34:16  time: 4.983108  data_time: 0.023611  
2024/07/15 14:19:31 - mmengine - INFO - Epoch(test) [2150/3254]    eta: 1:30:14  time: 5.001829  data_time: 0.023202  
2024/07/15 14:23:40 - mmengine - INFO - Epoch(test) [2200/3254]    eta: 1:26:11  time: 4.992838  data_time: 0.028979  
2024/07/15 14:27:49 - mmengine - INFO - Epoch(test) [2250/3254]    eta: 1:22:07  time: 4.979527  data_time: 0.023773  
2024/07/15 14:31:57 - mmengine - INFO - Epoch(test) [2300/3254]    eta: 1:18:02  time: 4.954017  data_time: 0.023528  
2024/07/15 14:36:03 - mmengine - INFO - Epoch(test) [2350/3254]    eta: 1:13:57  time: 4.920153  data_time: 0.023237  
2024/07/15 14:40:10 - mmengine - INFO - Epoch(test) [2400/3254]    eta: 1:09:52  time: 4.932357  data_time: 0.024971  
2024/07/15 14:44:17 - mmengine - INFO - Epoch(test) [2450/3254]    eta: 1:05:47  time: 4.954590  data_time: 0.025478  
2024/07/15 14:48:27 - mmengine - INFO - Epoch(test) [2500/3254]    eta: 1:01:43  time: 4.998220  data_time: 0.024985  
2024/07/15 14:52:38 - mmengine - INFO - Epoch(test) [2550/3254]    eta: 0:57:39  time: 5.014820  data_time: 0.024373  
2024/07/15 14:56:48 - mmengine - INFO - Epoch(test) [2600/3254]    eta: 0:53:35  time: 5.008004  data_time: 0.024370  
2024/07/15 15:00:57 - mmengine - INFO - Epoch(test) [2650/3254]    eta: 0:49:29  time: 4.964220  data_time: 0.023462  
2024/07/15 15:05:06 - mmengine - INFO - Epoch(test) [2700/3254]    eta: 0:45:24  time: 4.981177  data_time: 0.025067  
2024/07/15 15:09:14 - mmengine - INFO - Epoch(test) [2750/3254]    eta: 0:41:19  time: 4.970457  data_time: 0.023540  
2024/07/15 15:13:23 - mmengine - INFO - Epoch(test) [2800/3254]    eta: 0:37:13  time: 4.976051  data_time: 0.022893  
2024/07/15 15:17:33 - mmengine - INFO - Epoch(test) [2850/3254]    eta: 0:33:08  time: 4.997130  data_time: 0.024456  
2024/07/15 15:21:43 - mmengine - INFO - Epoch(test) [2900/3254]    eta: 0:29:02  time: 4.995629  data_time: 0.025141  
2024/07/15 15:25:54 - mmengine - INFO - Epoch(test) [2950/3254]    eta: 0:24:57  time: 5.022710  data_time: 0.023546  
2024/07/15 15:30:03 - mmengine - INFO - Epoch(test) [3000/3254]    eta: 0:20:51  time: 4.985912  data_time: 0.029214  
2024/07/15 15:34:12 - mmengine - INFO - Epoch(test) [3050/3254]    eta: 0:16:44  time: 4.974582  data_time: 0.022539  
2024/07/15 15:38:22 - mmengine - INFO - Epoch(test) [3100/3254]    eta: 0:12:38  time: 4.995910  data_time: 0.024794  
2024/07/15 15:42:30 - mmengine - INFO - Epoch(test) [3150/3254]    eta: 0:08:32  time: 4.968894  data_time: 0.024135  
2024/07/15 15:46:41 - mmengine - INFO - Epoch(test) [3200/3254]    eta: 0:04:26  time: 5.024782  data_time: 0.024576  
2024/07/15 15:50:49 - mmengine - INFO - Epoch(test) [3250/3254]    eta: 0:00:19  time: 4.960078  data_time: 0.023674  
2024/07/15 15:51:55 - mmengine - INFO - Evaluating CocoMetric...
2024/07/15 15:52:11 - mmengine - INFO - Epoch(test) [3254/3254]    coco/AP: 0.755850  coco/AP .5: 0.907975  coco/AP .75: 0.826035  coco/AP (M): 0.722557  coco/AP (L): 0.820016  coco/AR: 0.808501  coco/AR .5: 0.945057  coco/AR .75: 0.869018  coco/AR (M): 0.766949  coco/AR (L): 0.868822  data_time: 0.024153  time: 4.929617
